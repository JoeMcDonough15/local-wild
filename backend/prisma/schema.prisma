// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())
    username String @unique @db.VarChar(255)
    email String @unique
    password String @db.VarChar(255)
    profileImageUrl String?
    location String? @db.VarChar(255)
    aboutMe String? @db.VarChar(2000)
    createdAt DateTime @default(now()) @db.Timestamp()
    updatedAt DateTime @default(now()) @db.Timestamp()
    posts Post[]
    comments CommentOnPost[]
    replies CommentReply[]
}

model Post {
    id Int @id @default(autoincrement())
    imageUrl String @db.VarChar(500)
    title String @db.VarChar(50)
    photographer User @relation(fields: [photographerId], references: [id], onDelete: Cascade )
    photographerId Int 
    caption String? @db.VarChar(75)
    fullDescription String? @db.VarChar(2000)
    lat Decimal? @db.Decimal(100, 98)
    lng Decimal? @db.Decimal(100, 97)
    partOfDay String? @db.VarChar(50)
    datePhotographed DateTime?
    createdAt DateTime @default(now()) @db.Timestamp()
    updatedAt DateTime @default(now()) @db.Timestamp()
    comments CommentOnPost[]
}

model CommentOnPost {
    id Int @id @default(autoincrement())
    commentText String @db.VarChar(500)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId Int 
    commenter User @relation(fields: [commenterId], references: [id], onDelete: Cascade)
    commenterId Int
    createdAt DateTime @default(now()) @db.Timestamp()
    updatedAt DateTime @default(now()) @db.Timestamp()
    replies CommentReply[]
}

model CommentReply {
    id Int @id @default(autoincrement())
    replyText String @db.VarChar(500)
    originalComment CommentOnPost @relation(fields: [replyingTo], references: [id], onDelete: Cascade)
    replyingTo Int
    replyer User @relation(fields: [replyerId], references: [id], onDelete: Cascade)
    replyerId Int
    createdAt DateTime @default(now()) @db.Timestamp()
    updatedAt DateTime @default(now()) @db.Timestamp()
}

